{"version":3,"file":"static/js/77.df836261.chunk.js","mappings":"+LAeMA,EAAe,CACnBC,SAAU,GACVC,gBAAiB,IAGbC,EAASC,EAAAA,KAAaC,MAAM,CAChCJ,SAAUG,EAAAA,KAEPE,SAAS,YACTC,IAAI,EAAG,yBACPC,IAAI,GAAI,yBACRC,QAbiB,8DAehB,sGAEJP,gBAAiBE,EAAAA,KAEdE,SAAS,YACTI,MACC,CAACN,EAAAA,GAAQ,YAAa,MACtB,sBACA,iDA8EN,UA1EA,WAGE,OACE,SAAC,IAAD,CAAWO,UAAU,YAArB,UACE,UAAC,IAAD,CAAMA,UAAU,wBAAhB,WACE,eAAIA,UAAU,cAAd,UACE,iDAEF,SAAC,KAAD,CACEC,iBAAkBT,EAClBU,SAVqB,aAWrBC,cAAed,EAHjB,SAKG,gBACCe,EADD,EACCA,aAAcC,EADf,EACeA,aAAcC,EAD7B,EAC6BA,OAAQC,EADrC,EACqCA,QAASC,EAD9C,EAC8CA,OAD9C,OAGC,UAAC,IAAD,CAAMC,YAAU,EAACP,SAAUE,EAA3B,WACE,UAAC,UAAD,CAAYJ,UAAU,OAAOU,UAAU,qBAAvC,WACE,SAAC,UAAD,wBACA,SAAC,YAAD,CACEC,KAAK,WACLC,KAAK,WACLC,MAAOP,EAAOhB,SACdwB,SAAUT,EACVU,YAAaP,EAAOlB,SACpB0B,QAAST,EAAQjB,WAAakB,EAAOlB,SACrC2B,SAAUT,EAAOlB,WAElBkB,EAAOlB,WACR,SAAC,qBAAD,CAAuBqB,KAAK,UAA5B,SACGH,EAAOlB,YAGV,SAAC,qBAAD,8BAGF,UAAC,UAAD,CAAYU,UAAU,OAAOU,UAAU,qBAAvC,WACE,SAAC,UAAD,gCACA,SAAC,YAAD,CACEC,KAAK,WACLC,KAAK,kBACLC,MAAOP,EAAOf,gBACduB,SAAUT,EACVU,YAAaP,EAAOjB,gBACpByB,QAAST,EAAQhB,kBAAoBiB,EAAOjB,gBAC5C0B,SAAUT,EAAOjB,gBACjB2B,YAAY,cAEbV,EAAOjB,kBACR,SAAC,qBAAD,CAAuBoB,KAAK,UAA5B,SACGH,EAAOjB,mBAGV,SAAC,qBAAD,8BAEF,gBAAKS,UAAU,eAAf,UACE,SAAC,IAAD,CACEW,KAAK,SACLX,UAAU,uBACVmB,KAAK,iBAHP","sources":["Components/PasswordResetPage/index.jsx"],"sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable react/no-unescaped-entities */\r\n/* eslint-disable react/jsx-filename-extension */\r\n/* eslint-disable linebreak-style */\r\nimport React from 'react';\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n} from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nconst passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/;\r\n\r\nconst INTIALVALUES = {\r\n  password: '',\r\n  confirmPassword: '',\r\n};\r\n\r\nconst SCHEMA = yup.object().shape({\r\n  password: yup\r\n    .string()\r\n    .required('Required')\r\n    .min(8, 'Miniumum 8 Characters')\r\n    .max(24, 'Maximum 24 Characters')\r\n    .matches(\r\n      passwordRegex,\r\n      'Password needs to be at least 8 characters long consisting of alphanumeric characters with symbols',\r\n    ),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required('Required')\r\n    .oneOf(\r\n      [yup.ref('password'), null],\r\n      'Password Must Match',\r\n      'Minimum 8 Characters\\nMaximum 24 Characters',\r\n    ),\r\n});\r\n\r\nfunction PasswordResetPage() {\r\n  const passwordResetHandler = () => {};\r\n\r\n  return (\r\n    <Container className=\"py-5 my-5\">\r\n      <Form className=\"p-5 shadow shadow-100\">\r\n        <h1 className=\"text-center\">\r\n          <strong>New Password!</strong>\r\n        </h1>\r\n        <Formik\r\n          validationSchema={SCHEMA}\r\n          onSubmit={passwordResetHandler}\r\n          initialValues={INTIALVALUES}\r\n        >\r\n          {({\r\n            handleSubmit, handleChange, values, touched, errors,\r\n          }) => (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n              <Form.Group className=\"mb-3\" controlId=\"validationFormik02\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.password}\r\n                  isValid={touched.password && !errors.password}\r\n                  feedback={errors.password}\r\n                />\r\n                {errors.password && (\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.password}\r\n                </Form.Control.Feedback>\r\n                )}\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"validationFormik04\">\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  name=\"confirmPassword\"\r\n                  value={values.confirmPassword}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.confirmPassword}\r\n                  isValid={touched.confirmPassword && !errors.confirmPassword}\r\n                  feedback={errors.confirmPassword}\r\n                  placeholder=\"*********\"\r\n                />\r\n                {errors.confirmPassword && (\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.confirmPassword}\r\n                </Form.Control.Feedback>\r\n                )}\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n              </Form.Group>\r\n              <div className=\"d-grid gap-2\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary my-5\"\r\n                  text=\"Reset Password\"\r\n                >\r\n                  Reset Password\r\n\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PasswordResetPage;\r\n"],"names":["INTIALVALUES","password","confirmPassword","SCHEMA","yup","shape","required","min","max","matches","oneOf","className","validationSchema","onSubmit","initialValues","handleSubmit","handleChange","values","touched","errors","noValidate","controlId","type","name","value","onChange","isInvalid","isValid","feedback","placeholder","text"],"sourceRoot":""}